class Printer
instance variables

  -- Printer config/status
  private printerName: seq of (char);
  private printerCapabilities: PrinterCapability;
  private printerPricing: PrinterPricing;
  private printerCapacities: PrinterCapacity;
  private printerStatus: PrinterStatus;
  
  -- Report
  private printerReport: PrinterReport := new PrinterReport();

  -- Printer cannot have capacity of paper/toners it can't use
  inv printerCapabilities.getCanPrintA4() = false => printerCapacities.getMaxCapacityA4() = 0;
  inv printerCapabilities.getCanPrintA3() = false => printerCapacities.getMaxCapacityA3() = 0;
  inv printerCapabilities.getCanPrintBlack() = false => printerCapacities.getMaxCapacityBlack() = 0;
  inv printerCapabilities.getCanPrintColor() = false => printerCapacities.getMaxCapacityColor() = 0;
  
  -- Printer must have capacity of paper/toners it can use
  inv printerCapabilities.getCanPrintA4() = true => printerCapacities.getMaxCapacityA4() > 0;
  inv printerCapabilities.getCanPrintA3() = true => printerCapacities.getMaxCapacityA3() > 0;
  inv printerCapabilities.getCanPrintBlack() = true => printerCapacities.getMaxCapacityBlack() > 0;
  inv printerCapabilities.getCanPrintColor() = true => printerCapacities.getMaxCapacityColor() > 0;

  -- Printer cannot have status types that can't be possible for its capabilities
  inv "needA4" in set printerStatus.getStatus() => printerCapabilities.getCanPrintA4() = true;
  inv "needA3" in set printerStatus.getStatus() => printerCapabilities.getCanPrintA3() = true;
  inv "needBlackToner" in set printerStatus.getStatus() => printerCapabilities.getCanPrintBlack() = true;
  inv "needColorToner" in set printerStatus.getStatus() => printerCapabilities.getCanPrintColor() = true;

operations
  -- Constructs a printer object with the specified parameters (printerName, printerCapabilities, printerPricing, printerCapacities, printerStatus)
  -- printerCapabilities defines the page format and toner the printer has available
  -- printerPricing defines the price of printing each format using each toner option
  -- printerCapacities defines the max capacity of each paper format and toner along with the current capacities
  -- printerStatus defines the state of the printer (broken, operational, needing refill, etc)
  public Printer: seq of (char) * PrinterCapability * PrinterPricing * PrinterCapacity * PrinterStatus ==> Printer
    Printer(name, capabilities, pricing, capacities, status) == (
      printerName := name;
      printerCapabilities := capabilities;
      printerPricing := pricing;
      printerCapacities := capacities;
      printerStatus := status;
 		  return self;
 		);

  -- Prints the specified document of the specified user, updates the user's balance, the printer's toner levels
  -- and the printer's paper levels. Updates the document's pages left with the printed pages, if all pages
  -- were printed the document is removed from the user's document list. Lastly updates the printer status
  -- and the printer report with the newly printed page counts.
  -- Constraints:
    -- Document must be in the user's document list
    -- Printer must be capable of using the toner needed by the document
    -- Printer must be capable of using the page format needed by the document
    -- Printer must have toner left for the document (!= 0)
    -- Printer must have paper left for the document (!= 0)
    -- Printer must have "operational" status
    -- User must have enough balance to print the number of pages the printer can print of the document (check numPagesToPrint())
  public print: Document * User ==> ()
  print(document, user) == (
    dcl pagesToPrint: nat := numPagesToPrint(document);

    -- Update everything that depends on pagesLeft field
    user.withdraw(calcPrintingCost(document));
    updatePrinterToner(document, pagesToPrint);
    updatePrinterPaper(document, pagesToPrint);

    -- Update document's pages left and remove document from user list if no more pages left
    document.setPagesLeft(document.getPagesLeft() - pagesToPrint);
    if document.getPagesLeft() = 0
    then user.removeDocument(document);
    
    -- Update status and report
    updatePrinterStatus();
    updatePrinterReport(document, pagesToPrint);
  )
  pre document in set user.getDocumentList() and
      "operational" in set printerStatus.getStatus() and
      user.getBalance() >= calcPrintingCost(document) and
      checkPrinterTonerCapability(document) and
      checkPrinterPageFormatCapability(document) and
      checkPrinterHasToner(document) and
      checkPrinterHasPaper(document)
  post checkStatusCapacityCoupling();

  -- Computes the total amount of pages that can be printed of the specified document
  pure public numPagesToPrint: Document ==> nat
    numPagesToPrint(document) == (
      dcl intPages: nat := 0;
    
      -- Check max pages that the printer can print
      if document.getPageFormat() = '4' and document.getPageToner() = 'B'
      then intPages := minNat(printerCapacities.getNumOfSheetsA4(), printerCapacities.getBlackPrintsLeft())
      elseif document.getPageFormat() = '4' and document.getPageToner() = 'C'
      then intPages := minNat(printerCapacities.getNumOfSheetsA4(), printerCapacities.getColorPrintsLeft())
      elseif document.getPageFormat() = '3' and document.getPageToner() = 'B'
      then intPages := minNat(printerCapacities.getNumOfSheetsA3(), printerCapacities.getBlackPrintsLeft())
      elseif document.getPageFormat() = '3' and document.getPageToner() = 'C'
      then intPages := minNat(printerCapacities.getNumOfSheetsA3(), printerCapacities.getColorPrintsLeft());
      
      -- Return the document's pages left if the printer can print the entire document or the max the printer can print
      if document.getPagesLeft() > intPages
      then return intPages
      else return document.getPagesLeft();
    );

  -- Returns the minimum number between two natural numbers
  pure private minNat: nat * nat ==> nat
    minNat(a, b) == (
      if a > b
      then return b
      else return a;
    );

  -- Calculates the total amount of money needed to print the maximum possible pages of the specified document (may not be the entire document)
  pure public calcPrintingCost: Document ==> real
    calcPrintingCost(document) == (
      if document.getPageFormat() = '4' and document.getPageToner() = 'B'
      then return printerPricing.getPriceA4Black() * numPagesToPrint(document)
      elseif document.getPageFormat() = '4' and document.getPageToner() = 'C'
      then return printerPricing.getPriceA4Color() * numPagesToPrint(document)
      elseif document.getPageFormat() = '3' and document.getPageToner() = 'B'
      then return printerPricing.getPriceA3Black() * numPagesToPrint(document)
      elseif document.getPageFormat() = '3' and document.getPageToner() = 'C'
      then return printerPricing.getPriceA3Color() * numPagesToPrint(document)
      else return 0;
    );

  -- Checks printer status/capacity coupling (cannot have a status without the paper/toner levels being correct for it)
  pure private checkStatusCapacityCoupling: () ==> bool
    checkStatusCapacityCoupling() == (

      if printerCapabilities.getCanPrintA4() then return "needA4" in set printerStatus.getStatus() <=> printerCapacities.getNumOfSheetsA4() = 0;
      if printerCapabilities.getCanPrintA3() then return "needA3" in set printerStatus.getStatus() <=> printerCapacities.getNumOfSheetsA3() = 0;
      if printerCapabilities.getCanPrintBlack() then return "needBlackToner" in set printerStatus.getStatus() <=> printerCapacities.getBlackPrintsLeft() = 0;
      if printerCapabilities.getCanPrintColor() then return "needColorToner" in set printerStatus.getStatus() <=> printerCapacities.getColorPrintsLeft() = 0;
      
      return true;
    );

  -- Checks if the printer toner can print the specified document
  -- 'B' means black toner, 'C' means color toner
  pure private checkPrinterTonerCapability: Document ==> bool
    checkPrinterTonerCapability(document) == (
      if document.getPageToner() = 'B' and printerCapabilities.getCanPrintBlack()
      then return true
      elseif document.getPageToner() = 'C' and printerCapabilities.getCanPrintColor()
      then return true
      else return false;
    );

  -- Checks if the printer has toner left for the specified document
  -- 'B' means black toner, 'C' means color toner
  pure private checkPrinterHasToner: Document ==> bool
    checkPrinterHasToner(document) == (
      if document.getPageToner() = 'B' and printerCapacities.getBlackPrintsLeft() = 0
      then return false
      elseif document.getPageToner() = 'C' and printerCapacities.getColorPrintsLeft() = 0
      then return false
      else return true;
    );
    
  -- Updates the printer toner used up when printing the specified document
  -- 'B' means black toner, 'C' means color toner
  private updatePrinterToner: Document * nat ==> ()
    updatePrinterToner(document, pagesPrinted) == (
      if document.getPageToner() = 'B'
      then printerCapacities.setBlackPrintsLeft(printerCapacities.getBlackPrintsLeft() - pagesPrinted)
      elseif document.getPageToner() = 'C'
      then printerCapacities.setColorPrintsLeft(printerCapacities.getColorPrintsLeft() - pagesPrinted);
    );

  -- Checks if the printer can print the page format needed by the specified document
  -- '4' means A4 and '3' means A3
  pure private checkPrinterPageFormatCapability: Document ==> bool
    checkPrinterPageFormatCapability(document) == (
      if document.getPageFormat() = '4' and printerCapabilities.getCanPrintA4()
      then return true
      elseif document.getPageFormat() = '3' and printerCapabilities.getCanPrintA3()
      then return true
      else return false;
    );

  -- Checks if the printer has paper left for the specified document
  -- '4' means A4 and '3' means A3
  pure private checkPrinterHasPaper: Document ==> bool
    checkPrinterHasPaper(document) == (
      if document.getPageFormat() = '4' and printerCapacities.getNumOfSheetsA4() = 0
      then return false
      elseif document.getPageFormat() = '3' and printerCapacities.getNumOfSheetsA3() = 0
      then return false
      else return true;
    );

  -- Updates the printer paper used up when printing the specified document
  -- '4' means A4 and '3' means A3
  private updatePrinterPaper: Document * nat ==> ()
    updatePrinterPaper(document, pagesPrinted) == (
      if document.getPageFormat() = '4'
      then printerCapacities.setNumOfSheetsA4(printerCapacities.getNumOfSheetsA4() - pagesPrinted)
      elseif document.getPageFormat() = '3'
      then printerCapacities.setNumOfSheetsA3(printerCapacities.getNumOfSheetsA3() - pagesPrinted);
    );

  -- Updates the printer status object with refill needs
  private updatePrinterStatus: () ==> ()
    updatePrinterStatus() == (
      if printerCapacities.getNumOfSheetsA4() = 0 and printerCapabilities.getCanPrintA4()
      then printerStatus.addStatus("needA4");
      
      if printerCapacities.getNumOfSheetsA3() = 0 and printerCapabilities.getCanPrintA3()
      then printerStatus.addStatus("needA3");
      
      if printerCapacities.getBlackPrintsLeft() = 0 and printerCapabilities.getCanPrintBlack()
      then printerStatus.addStatus("needBlackToner");
      
      if printerCapacities.getColorPrintsLeft() = 0 and printerCapabilities.getCanPrintColor()
      then printerStatus.addStatus("needColorToner");
    );

  -- Updates the printer report object with the printed pages
  private updatePrinterReport: Document * nat ==> ()
    updatePrinterReport(document, pages) == (
      if document.getPageFormat() = '4' and document.getPageToner() = 'B'
      then printerReport.addBlackA4(pages)
      elseif document.getPageFormat() = '4' and document.getPageToner() = 'C'
      then printerReport.addColorA4(pages)
      elseif document.getPageFormat() = '3' and document.getPageToner() = 'B'
      then printerReport.addBlackA3(pages)
      elseif document.getPageFormat() = '3' and document.getPageToner() = 'C'
      then printerReport.addColorA3(pages);
    );

  -- Breaks printer with the specified negative status
  -- Status supplied must be in the available status types (check PrinterStatus for available status types)
  public break: set of (seq of (char)) ==> ()
    break(statusSet) == (
      for all status in set statusSet do (
      
        -- Add status related with paper/toner levels
        if status = "needA4"
        then (
               printerCapacities.setNumOfSheetsA4(0);
               printerStatus.addStatus("needA4");
             )
        elseif status = "needA3"
        then (
               printerCapacities.setNumOfSheetsA3(0);
               printerStatus.addStatus("needA3");
             )
        elseif status = "needBlackToner"
        then (
               printerCapacities.setBlackPrintsLeft(0);
               printerStatus.addStatus("needBlackToner"); 
             )
        elseif status = "needColorToner"
        then (
               printerCapacities.setColorPrintsLeft(0);
               printerStatus.addStatus("needColorToner"); 
             );
        
        -- Toggle operational status according to supplied status set
        if status = "needFixing" and "operational" in set printerStatus.getStatus()
        then printerStatus.flipOperationalStatus()
      );
    )
    pre forall s in set statusSet & s in set printerStatus.getStatusT()
    post checkStatusCapacityCoupling();

  -- Sets all negative status types that can be set for the printer's capabilities
  public breakAll: () ==> ()
    breakAll() == (

      if printerCapabilities.getCanPrintA4()
      then (
             printerCapacities.setNumOfSheetsA4(0);
             printerStatus.addStatus("needA4");
           );

      if printerCapabilities.getCanPrintA3()
      then (
             printerCapacities.setNumOfSheetsA3(0);
             printerStatus.addStatus("needA3");
           );

      if printerCapabilities.getCanPrintBlack()
      then (
             printerCapacities.setBlackPrintsLeft(0);
             printerStatus.addStatus("needBlackToner");
           );

      if printerCapabilities.getCanPrintColor()
      then (
             printerCapacities.setColorPrintsLeft(0);
             printerStatus.addStatus("needColorToner");
           );

      -- Toggle operational status if printer is operational
      if "operational" in set printerStatus.getStatus()
      then printerStatus.flipOperationalStatus()
    )
    post checkStatusCapacityCoupling();

  -- Fixes specified negative status
  -- Status supplied must be in the available status types (check PrinterStatus for available status types)
  -- Status supplies must be in the current status (can't fix what isn't broken)
  public fix: set of (seq of (char)) ==> ()
    fix(statusSet) == (
      for all status in set statusSet do (
      
        -- Fix status related to paper/toner levels
        if status = "needA4"
        then (
               printerCapacities.setNumOfSheetsA4(printerCapacities.getMaxCapacityA4());
               printerStatus.removeStatus("needA4");
             )
        elseif status = "needA3"
        then (
               printerCapacities.setNumOfSheetsA3(printerCapacities.getMaxCapacityA3());
               printerStatus.removeStatus("needA3");
             )
        elseif status = "needBlackToner"
        then (
               printerCapacities.setBlackPrintsLeft(printerCapacities.getMaxCapacityBlack());
               printerStatus.removeStatus("needBlackToner"); 
             )
        elseif status = "needColorToner"
        then (
               printerCapacities.setColorPrintsLeft(printerCapacities.getMaxCapacityColor());
               printerStatus.removeStatus("needColorToner"); 
             );
        
        -- Toggle operational status according to supplied status set
        if status = "needFixing" and "needFixing" in set printerStatus.getStatus()
        then printerStatus.flipOperationalStatus()
      );
    )
    pre forall s1 in set statusSet & s1 in set printerStatus.getStatusT() and
        forall s2 in set statusSet & s2 in set printerStatus.getStatus()
    post checkStatusCapacityCoupling();

  -- Sets printer back to "operational" status restoring all paper/toner levels that can be set for the printer's capabilities
  public fixAll: () ==> ()
    fixAll() == (
    
      for all status in set printerStatus.getStatus() do (

        if printerCapabilities.getCanPrintA4() and status = "needA4"
        then (
               printerCapacities.setNumOfSheetsA4(printerCapacities.getMaxCapacityA4());
               printerStatus.removeStatus("needA4");
             );

        if printerCapabilities.getCanPrintA3() and status = "needA3"
        then (
               printerCapacities.setNumOfSheetsA3(printerCapacities.getMaxCapacityA3());
               printerStatus.removeStatus("needA3");
             );

        if printerCapabilities.getCanPrintBlack() and status = "needBlackToner"
        then (
               printerCapacities.setBlackPrintsLeft(printerCapacities.getMaxCapacityBlack());
               printerStatus.removeStatus("needBlackToner");
             );

        if printerCapabilities.getCanPrintColor() and status = "needColorToner"
        then (
               printerCapacities.setColorPrintsLeft(printerCapacities.getMaxCapacityColor());
               printerStatus.removeStatus("needColorToner");
             );

        -- Toggle operational status if printer is in need of fixing
        if "needFixing" in set printerStatus.getStatus()
        then printerStatus.flipOperationalStatus()
      )
    )
    post checkStatusCapacityCoupling();

  -- Prints an individual report of the printer, contains number of pages printed per format and toner as well as money received from each combination of those
  public printIndividualReport: () ==> ()
    printIndividualReport() == (

      -- Header
      IO`print("Name: ");
      IO`print(self.printerName);
      IO`print("\n");

      -- Pages printed
      IO`print("Number of A4 Black pages printed: ");
      if printerCapabilities.getCanPrintA4() and printerCapabilities.getCanPrintBlack()
      then IO`print(printerReport.getBlackA4Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Number of A4 Color pages printed: ");
      if printerCapabilities.getCanPrintA4() and printerCapabilities.getCanPrintColor()
      then IO`print(printerReport.getColorA4Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Number of A3 Black pages printed: ");
      if printerCapabilities.getCanPrintA3() and printerCapabilities.getCanPrintBlack()
      then IO`print(printerReport.getBlackA3Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Number of A3 Color pages printed: ");
      if printerCapabilities.getCanPrintA3() and printerCapabilities.getCanPrintColor()
      then IO`print(printerReport.getColorA3Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Total pages printed: ");
      IO`print(sumTotalPagesPrinted());
      IO`print("\n");

      -- Money received
      IO`print("Money from printing A4 Black: ");
      if printerCapabilities.getCanPrintA4() and printerCapabilities.getCanPrintBlack()
      then IO`print(printerPricing.getPriceA4Black() * printerReport.getBlackA4Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Money from printing A4 Color: ");
      if printerCapabilities.getCanPrintA4() and printerCapabilities.getCanPrintColor()
      then IO`print(printerPricing.getPriceA4Color() * printerReport.getColorA4Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Money from printing A3 Black: ");
      if printerCapabilities.getCanPrintA3() and printerCapabilities.getCanPrintBlack()
      then IO`print(printerPricing.getPriceA3Black() * printerReport.getBlackA3Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Money from printing A3 Color: ");
      if printerCapabilities.getCanPrintA3() and printerCapabilities.getCanPrintColor()
      then IO`print(printerPricing.getPriceA3Color() * printerReport.getColorA3Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Total money: ");
      IO`print(sumTotalMoneyReceived());
      IO`print("\n");
      IO`print("\n");
    );

  -- Returns the sum of the total pages printed at this printer
  public sumTotalPagesPrinted: () ==> nat
    sumTotalPagesPrinted() == return printerReport.getBlackA4Printed() +
                                     printerReport.getColorA4Printed() +
                                     printerReport.getBlackA3Printed() +
                                     printerReport.getColorA3Printed();

  -- Returns the total money received from all printings at this printer
  public sumTotalMoneyReceived: () ==> real
    sumTotalMoneyReceived() == return printerPricing.getPriceA4Black() * printerReport.getBlackA4Printed() +
                                      printerPricing.getPriceA4Color() * printerReport.getColorA4Printed() +
                                      printerPricing.getPriceA3Black() * printerReport.getBlackA3Printed() +
                                      printerPricing.getPriceA3Color() * printerReport.getColorA3Printed();

-- GETTERS
  -- Returns the printer name
  pure public getPrinterName: () ==> seq of (char)
    getPrinterName() == return self.printerName;

  -- Returns the printer report object
  public getPrinterReport: () ==> PrinterReport
    getPrinterReport() == return self.printerReport;

  -- Returns the printer pricing object
  public getPrinterPricing: () ==> PrinterPricing
    getPrinterPricing() == return self.printerPricing;

  -- Returns the printer capabilities object
  public getPrinterCapabilities: () ==> PrinterCapability
    getPrinterCapabilities() == return self.printerCapabilities;

  -- Returns the printer capacities object
  public getPrinterCapacities: () ==> PrinterCapacity
    getPrinterCapacities() == return self.printerCapacities;

  -- Returns the printer status object
  public getPrinterStatus: () ==> PrinterStatus
    getPrinterStatus() == return self.printerStatus;

end Printer