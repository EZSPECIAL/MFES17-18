class Printer
instance variables

  -- Printer config/status
  private printerName: seq of (char);
  private printerCapabilities: PrinterCapability;
  private printerPricing: PrinterPricing;
  private printerCapacities: PrinterCapacity;
  private printerStatus: PrinterStatus;
  
  -- Report
  private printerReport: PrinterReport := new PrinterReport();

operations
  -- Constructs a printer object with the specified parameters (printerName, printerCapabilities, printerPricing, printerCapacities, printerStatus)
  -- printerCapabilities defines the page format and toner the printer has available
  -- printerPricing defines the price of printing each format using each toner option
  -- printerCapacities defines the max capacity of each paper format and toner along with the current capacities
  -- printerStatus defines the state of the printer (broken, operational, needing refill, etc)
  public Printer: seq of (char) * PrinterCapability * PrinterPricing * PrinterCapacity * PrinterStatus ==> Printer
    Printer(name, capabilities, pricing, capacities, status) == (
      printerName := name;
      printerCapabilities := capabilities;
      printerPricing := pricing;
      printerCapacities := capacities;
      printerStatus := status;
 		  return self;
 		);

  -- TODO
  -- Constraints:
    -- Document must be in the user's document list
    -- Printer must be capable of using the toner needed by the document
    -- Printer must be capable of using the page format needed by the document
    -- User must have enough balance to print the number of pages the printer can print of the document
  public print: Document * User ==> ()
  print(document, user) == (
    user.withdraw(calcPrintingCost(document));
  )
  pre document in set user.getDocumentList() and
      user.getBalance() >= calcPrintingCost(document) and
      checkPrinterTonerCapability(document) and
      checkPrinterPageFormatCapability(document);

  -- Computes the total amount of pages that can be printed of the specified document
  pure public numPagesToPrint: Document ==> nat
    numPagesToPrint(document) == (
      dcl intPages: nat := 0;
    
      -- Check max pages that the printer can print
      if document.getPageFormat() = '4' and document.getPageToner() = 'B'
      then intPages := minNat(printerCapacities.getNumOfSheetsA4(), printerCapacities.getBlackPrintsLeft())
      elseif document.getPageFormat() = '4' and document.getPageToner() = 'C'
      then intPages := minNat(printerCapacities.getNumOfSheetsA4(), printerCapacities.getColorPrintsLeft())
      elseif document.getPageFormat() = '3' and document.getPageToner() = 'B'
      then intPages := minNat(printerCapacities.getNumOfSheetsA3(), printerCapacities.getBlackPrintsLeft())
      elseif document.getPageFormat() = '3' and document.getPageToner() = 'C'
      then intPages := minNat(printerCapacities.getNumOfSheetsA3(), printerCapacities.getColorPrintsLeft());
      
      -- Return the document's pages left if the printer can print the entire document or the max the printer can print
      if document.getPagesLeft() > intPages
      then return intPages
      else return document.getPagesLeft();
    );

  -- Returns the minimum number between two natural numbers
  pure private minNat: nat * nat ==> nat
    minNat(a, b) == (
      if a > b
      then return b
      else return a;
    );

  -- Calculates the total amount of money needed to print the maximum possible pages of the specified document (may not be the entire document)
  pure public calcPrintingCost: Document ==> real
    calcPrintingCost(document) == (
      if document.getPageFormat() = '4' and document.getPageToner() = 'B'
      then return printerPricing.getPriceA4Black() * numPagesToPrint(document)
      elseif document.getPageFormat() = '4' and document.getPageToner() = 'C'
      then return printerPricing.getPriceA4Color() * numPagesToPrint(document)
      elseif document.getPageFormat() = '3' and document.getPageToner() = 'B'
      then return printerPricing.getPriceA3Black() * numPagesToPrint(document)
      elseif document.getPageFormat() = '3' and document.getPageToner() = 'C'
      then return printerPricing.getPriceA3Color() * numPagesToPrint(document)
      else return 0;
    );

  -- Checks if the printer toner can print the specified document
  -- 'B' means black toner, 'C' means color toner
  pure private checkPrinterTonerCapability: Document ==> bool
    checkPrinterTonerCapability(document) == (
      if document.getPageToner() = 'B' and printerCapabilities.getCanPrintBlack()
      then return true
      elseif document.getPageToner() = 'C' and printerCapabilities.getCanPrintColor()
      then return true
      else return false;
    );

  -- Checks if the printer can print the page format needed by the specified document
  -- '4' means A4 and '3' means A3
  pure private checkPrinterPageFormatCapability: Document ==> bool
    checkPrinterPageFormatCapability(document) == (
      if document.getPageFormat() = '4' and printerCapabilities.getCanPrintA4()
      then return true
      elseif document.getPageFormat() = '3' and printerCapabilities.getCanPrintA3()
      then return true
      else return false;
    );

  -- TODO
  public break: ()  ==> ?
  break() == is not yet specified;

  -- TODO
  public fix: ()  ==> ?
  fix() == is not yet specified;

  -- TODO remove hardcoded add operations
  -- Prints an individual report of the printer, contains number of pages printed per format and toner as well as money received from each combination of those
  public printIndividualReport: ()  ==> ()
    printIndividualReport() == (
      printerReport.addBlackA4(20);
      printerReport.addColorA4(15);

      -- Header
      IO`print("Name: ");
      IO`print(self.printerName);
      IO`print("\n");

      -- Pages printed
      IO`print("Number of A4 Black pages printed: ");
      if printerCapabilities.getCanPrintA4() and printerCapabilities.getCanPrintBlack()
      then IO`print(printerReport.getBlackA4Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Number of A4 Color pages printed: ");
      if printerCapabilities.getCanPrintA4() and printerCapabilities.getCanPrintColor()
      then IO`print(printerReport.getColorA4Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Number of A3 Black pages printed: ");
      if printerCapabilities.getCanPrintA3() and printerCapabilities.getCanPrintBlack()
      then IO`print(printerReport.getBlackA3Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Number of A3 Color pages printed: ");
      if printerCapabilities.getCanPrintA3() and printerCapabilities.getCanPrintColor()
      then IO`print(printerReport.getColorA3Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Total pages printed: ");
      IO`print(sumTotalPagesPrinted());
      IO`print("\n");
      
      -- Money received
      IO`print("Money from printing A4 Black: ");
      if printerCapabilities.getCanPrintA4() and printerCapabilities.getCanPrintBlack()
      then IO`print(printerPricing.getPriceA4Black() * printerReport.getBlackA4Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Money from printing A4 Color: ");
      if printerCapabilities.getCanPrintA4() and printerCapabilities.getCanPrintColor()
      then IO`print(printerPricing.getPriceA4Color() * printerReport.getColorA4Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Money from printing A3 Black: ");
      if printerCapabilities.getCanPrintA3() and printerCapabilities.getCanPrintBlack()
      then IO`print(printerPricing.getPriceA3Black() * printerReport.getBlackA3Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Money from printing A3 Color: ");
      if printerCapabilities.getCanPrintA3() and printerCapabilities.getCanPrintColor()
      then IO`print(printerPricing.getPriceA3Color() * printerReport.getColorA3Printed())
      else IO`print("N/A");
      IO`print("\n");
      IO`print("Total money: ");
      IO`print(sumTotalMoneyReceived());
      IO`print("\n");
      IO`print("\n");
    );

  -- Returns the sum of the total pages printed at this printer
  public sumTotalPagesPrinted: () ==> nat
    sumTotalPagesPrinted() == return printerReport.getBlackA4Printed() +
                                     printerReport.getColorA4Printed() +
                                     printerReport.getBlackA3Printed() +
                                     printerReport.getColorA3Printed();

  -- Returns the total money received from all printings at this printer
  public sumTotalMoneyReceived: () ==> real
    sumTotalMoneyReceived() == return printerPricing.getPriceA4Black() * printerReport.getBlackA4Printed() +
                                      printerPricing.getPriceA4Color() * printerReport.getColorA4Printed() +
                                      printerPricing.getPriceA3Black() * printerReport.getBlackA3Printed() +
                                      printerPricing.getPriceA3Color() * printerReport.getColorA3Printed();

-- GETTERS
  -- Returns the printer name
  pure public getPrinterName: () ==> seq of (char)
    getPrinterName() == return self.printerName;

  -- Returns the printer report object
  public getPrinterReport: () ==> PrinterReport
    getPrinterReport() == return self.printerReport;

  -- Returns the printer pricing object
  public getPrinterPricing: () ==> PrinterPricing
    getPrinterPricing() == return self.printerPricing;

  -- Returns the printer capabilities object
  public getPrinterCapabilities: () ==> PrinterCapability
    getPrinterCapabilities() == return self.printerCapabilities;

end Printer