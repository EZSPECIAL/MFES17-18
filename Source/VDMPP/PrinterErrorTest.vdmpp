class PrinterErrorTest
operations

  -- Checks if a boolean expression is true
  private assertTrue: bool ==> ()
    assertTrue(cond) == return pre cond;

  -- Checks values are equal
  private assertEqual: ? * ? ==> ()
    assertEqual(expected, actual) == return post expected = actual;

  -- Checks values are approximately equal
  private assertApproximatelyEqual: real * real ==> ()
    assertApproximatelyEqual(expected, actual) == (
      dcl delta: real := abs expected - actual;

      if delta < 0.00001
      then assertTrue(true)
      else assertTrue(false);
    );

  -- Testing for PrinterStatus class
  -- Fails because "needA5" is not an available status
  private testPrinterStatusUnavailableStatus: () ==> ()
    testPrinterStatusUnavailableStatus() == (
      dcl p1: PrinterStatus := new PrinterStatus();
      p1.addStatus("needA5");
    );

  -- Fails because a printer can't be operational and needing fixing at the same time
  private testPrinterStatusOperationalAndNeedFixing: () ==> ()
    testPrinterStatusOperationalAndNeedFixing() == (
      dcl p1: PrinterStatus := new PrinterStatus();
      p1.addStatus("needFixing");
    );

  -- Fails because a printer needs to be operational or needing fixing
  private testPrinterStatusIsntOperationalOrNeedFixing: () ==> ()
    testPrinterStatusIsntOperationalOrNeedFixing() == (
      dcl p1: PrinterStatus := new PrinterStatus();
      p1.addStatus("needA4");
      p1.removeStatus("operational");
    );

  -- Testing for Document class
  -- Fails because a document needs a positive (>= 1) number of pages
  private testDocumentPositiveNumPages: () ==> ()
    testDocumentPositiveNumPages() == (
      dcl d: Document := new Document("testName", 0, '4', 'C');
      assertTrue(true);
      assertEqual(d.getDocName(), "testName");
    );

  -- Fails because a document format isn't '4' or '3' (the available formats)
  private testDocumentUnavailableFormat: () ==> ()
    testDocumentUnavailableFormat() == (
      dcl d: Document := new Document("testName", 1, '5', 'C');
      assertEqual(d.getDocName(),"testName");
      assertTrue(true);
    );

  -- Fails because a document toner isn't 'B' or 'C' (the available toners)
  private testDocumentUnavailableToner: () ==> ()
    testDocumentUnavailableToner() == (
      dcl d: Document := new Document("testName", 1, '4', 'H');
      assertTrue(true);
      assertEqual(d.getDocName(), "testName");
    );

  -- Testing for PrinterCapability class
  -- Fails because a printer doesn't have the capability to print in black or in color
  private testPrinterCapabilityBlackOrColor: () ==> ()
    testPrinterCapabilityBlackOrColor() == (
     dcl pCapability: PrinterCapability := new PrinterCapability(true, true, false, false);
     assertTrue(true);
     assertEqual(pCapability.getCanPrintA4(), true);
    );

  -- Fails because a printer doesn't have the capability to print in A3 or in A4
  private testPrinterCapabilityA3OrA4: () ==> ()
    testPrinterCapabilityA3OrA4() == (
      dcl pCapability: PrinterCapability := new PrinterCapability(false, false, true, false);
      assertTrue(true);
      assertEqual(pCapability.getCanPrintA4(), false);
    );

  -- Testing for PrinterCapacity class
  -- Fails because the number of sheets lefts can't be greater than the max
  private testPrinterCapacityMax: () ==> ()
    testPrinterCapacityMax() == (
      dcl pCapacity: PrinterCapacity := new PrinterCapacity(7, 7, 7, 7);
      pCapacity.setNumOfSheetsA4(8);
    );

  -- Testing for PrinterPricing class
  -- Fails because the price must be greater than zero
  private testPrinterPricingGreaterThanZero: () ==> ()
    testPrinterPricingGreaterThanZero() == (
      dcl pPricing: PrinterPricing := new PrinterPricing(0, 0.7, 0.8, 0.9);
      assertTrue(true);
      assertEqual(pPricing.getPriceA4Black(), 0);
    );

  -- Testing for User class
  -- Fails because a User balance must always be greater or equal to 0
  private testUserBalanceGreaterOrEqualtoZero: () ==> ()
    testUserBalanceGreaterOrEqualtoZero() == (
      dcl user: User := new User(0.1);
      user.withdraw(0.2);
    );

  -- Testing for Printer class
  -- Fails because the printer has capacity (> 0) on paper/toners it doesn't have the capability to print
  private testPrinterHasCapacityButNotCapability: () ==> ()
    testPrinterHasCapacityButNotCapability() == (
      dcl pPricing: PrinterPricing := new PrinterPricing(0.5, 0.8, 0.6, 1);
      dcl pCapacity: PrinterCapacity := new PrinterCapacity(20, 1, 25, 0);
      dcl pCapability: PrinterCapability := new PrinterCapability(true, false, true, false);
      dcl pStatus: PrinterStatus := new PrinterStatus();
      dcl printer: Printer := new Printer("testPrinterName", pCapability, pPricing, pCapacity, pStatus);
      assertTrue(true);
      assertEqual(printer.getPrinterName(), "testPrinterName");
    );

  -- Fails because the printer doesn't have capacity (> 0) on paper/toners that it does have the capability to print
  private testPrinterHasCapabilityButNotCapacity: () ==> ()
    testPrinterHasCapabilityButNotCapacity() == (
      dcl pPricing: PrinterPricing := new PrinterPricing(0.5, 0.8, 0.6, 1);
      dcl pCapacity: PrinterCapacity := new PrinterCapacity(0, 0, 25, 0);
      dcl pCapability: PrinterCapability := new PrinterCapability(true, false, true, false);
      dcl pStatus: PrinterStatus := new PrinterStatus();
      dcl printer: Printer := new Printer("testPrinterName", pCapability, pPricing, pCapacity, pStatus);
      assertTrue(true);
      assertEqual(printer.getPrinterName(), "testPrinterName");
    );

  -- Fails because the document isn't in the user's list
  private testPrinterUserDoesntHaveDocument: () ==> ()
    testPrinterUserDoesntHaveDocument() == (
        dcl user: User := new User(30);

        dcl pPricing: PrinterPricing := new PrinterPricing(0.5, 0.8, 0.6, 1);
        dcl pCapacity: PrinterCapacity := new PrinterCapacity(20, 0, 25, 0);
        dcl pCapability: PrinterCapability := new PrinterCapability(true, false, true, false);
        dcl pStatus: PrinterStatus := new PrinterStatus();
        dcl printer: Printer := new Printer("testPrinterName", pCapability, pPricing, pCapacity, pStatus);

        dcl doc1: Document := new Document("doc1", 10, '4', 'B');

        printer.print(doc1, user);
    );

  -- Fails because the document format isn't supported by the printer
  private testPrinterFormatNotInCapabilities: () ==> ()
    testPrinterFormatNotInCapabilities() == (
      dcl user: User := new User(30);

      dcl pPricing: PrinterPricing := new PrinterPricing(0.5, 0.8, 0.6, 1);
      dcl pCapacity: PrinterCapacity := new PrinterCapacity(20, 0, 25, 0);
      dcl pCapability: PrinterCapability := new PrinterCapability(true, false, true, false);
      dcl pStatus: PrinterStatus := new PrinterStatus();
      dcl printer: Printer := new Printer("testPrinterName", pCapability, pPricing, pCapacity, pStatus);

      dcl doc1: Document := new Document("doc1", 10, '3', 'B');
      user.addDocument(doc1);

      printer.print(doc1, user);
    );

  -- Fails because the document toner isn't supported by the printer
  private testPrinterTonerNotInCapabilities: () ==> ()
    testPrinterTonerNotInCapabilities() == (
      dcl user: User := new User(30);

      dcl pPricing: PrinterPricing := new PrinterPricing(0.5, 0.8, 0.6, 1);
      dcl pCapacity: PrinterCapacity := new PrinterCapacity(20, 0, 25, 0);
      dcl pCapability: PrinterCapability := new PrinterCapability(true, false, true, false);
      dcl pStatus: PrinterStatus := new PrinterStatus();
      dcl printer: Printer := new Printer("testPrinterName", pCapability, pPricing, pCapacity, pStatus);

      dcl doc1: Document := new Document("doc1", 10, '4', 'C');
      user.addDocument(doc1);

      printer.print(doc1, user);
    );

  -- Fails because there is no toner left
  private testPrinterNoTonerLeft: () ==> ()
    testPrinterNoTonerLeft() == (
      dcl user: User := new User(30);

      dcl pPricing: PrinterPricing := new PrinterPricing(0.5, 0.8, 0.6, 1);
      dcl pCapacity: PrinterCapacity := new PrinterCapacity(25, 0, 20, 0);
      dcl pCapability: PrinterCapability := new PrinterCapability(true, false, true, false);
      dcl pStatus: PrinterStatus := new PrinterStatus();
      dcl printer: Printer := new Printer("testPrinterName", pCapability, pPricing, pCapacity, pStatus);

      dcl doc1: Document := new Document("doc1", 20, '4', 'B');
      dcl doc2: Document := new Document("doc2", 1, '4', 'B');
      user.addDocument(doc1);
      user.addDocument(doc2);

      printer.print(doc1, user);
      printer.print(doc2, user);
  );

  -- Fails because there is no pages left
  private testPrinterNoPagesLeft: () ==> ()
    testPrinterNoPagesLeft() == (
      dcl user: User := new User(30);

      dcl pPricing: PrinterPricing := new PrinterPricing(0.5, 0.8, 0.6, 1);
      dcl pCapacity: PrinterCapacity := new PrinterCapacity(20, 0, 25, 0);
      dcl pCapability: PrinterCapability := new PrinterCapability(true, false, true, false);
      dcl pStatus: PrinterStatus := new PrinterStatus();
      dcl printer: Printer := new Printer("testPrinterName", pCapability, pPricing, pCapacity, pStatus);

      dcl doc1: Document := new Document("doc1", 20, '4', 'B');
      dcl doc2: Document := new Document("doc2", 1, '4', 'B');
      user.addDocument(doc1);
      user.addDocument(doc2);

      printer.print(doc1, user);
      printer.print(doc2, user)
    );

  -- Fails because printer status isn't "operational"
  private testPrinterNotOperational: () ==> ()
    testPrinterNotOperational() == (
      dcl user: User := new User(30);

      dcl pPricing: PrinterPricing := new PrinterPricing(0.5, 0.8, 0.6, 1);
      dcl pCapacity: PrinterCapacity := new PrinterCapacity(20, 0, 25, 0);
      dcl pCapability: PrinterCapability := new PrinterCapability(true, false, true, false);
      dcl pStatus: PrinterStatus := new PrinterStatus();
      dcl printer: Printer := new Printer("testPrinterName", pCapability, pPricing, pCapacity, pStatus);

      dcl doc1: Document := new Document("doc1", 20, '4', 'B');
      user.addDocument(doc1);

      printer.break({"needFixing"});

      printer.print(doc1,user);
    );

  -- Fails because the user doesn't have enough balance
  private testPrinterUserDoesntHaveBalance: () ==> ()
    testPrinterUserDoesntHaveBalance() == (
      dcl user: User := new User(30);

      dcl pPricing: PrinterPricing := new PrinterPricing(0.5, 0.8, 0.6, 1);
      dcl pCapacity: PrinterCapacity := new PrinterCapacity(20, 0, 25, 0);
      dcl pCapability: PrinterCapability := new PrinterCapability(true, false, true, false);
      dcl pStatus: PrinterStatus := new PrinterStatus();
      dcl printer: Printer := new Printer("testPrinterName", pCapability, pPricing, pCapacity, pStatus);

      dcl doc1: Document := new Document("doc1", 20, '4', 'B');
      user.addDocument(doc1);

      printer.break({"needFixing"});

      printer.print(doc1, user);
    );

  -- Fails because the printer doesn't have the capability of the status
  private testPrinterStatusInCapabilities: () ==> ()
    testPrinterStatusInCapabilities() == (
      dcl pPricing: PrinterPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24);
      dcl pCapability: PrinterCapability := new PrinterCapability(true, false, true, true);
      dcl pCapacity: PrinterCapacity := new PrinterCapacity(45, 0, 50, 5);
      dcl pStatus: PrinterStatus := new PrinterStatus();
      dcl p: Printer := new Printer("p", pCapability, pPricing, pCapacity, pStatus);

      IO`println(p.getPrinterStatus().getStatus());
      p.break({"needFixing", "needA3"});
    );

  -- Testing entry point, all of these tests should fail, test one at a time
  public static main: () ==> ()
    main() == (
      dcl testSuite: PrinterErrorTest := new PrinterErrorTest();

      -- PrinterStatus
      --testSuite.testPrinterStatusUnavailableStatus();
      --testSuite.testPrinterStatusOperationalAndNeedFixing();
      --testSuite.testPrinterStatusIsntOperationalOrNeedFixing();

      -- Document
      --testSuite.testDocumentPositiveNumPages();
      --testSuite.testDocumentUnavailableFormat();
      --testSuite.testDocumentUnavailableToner();

      -- PrinterCapability
      --testSuite.testPrinterCapabilityBlackOrColor();
      --testSuite.testPrinterCapabilityA3OrA4();

      -- PrinterCapacity
      --testSuite.testPrinterCapacityMax();

      -- PrinterPricing
      --testSuite.testPrinterPricingGreaterThanZero();

      -- User
      --testSuite.testUserBalanceGreaterOrEqualtoZero();

      -- Printer
      --testSuite.testPrinterHasCapacityButNotCapability();
      --testSuite.testPrinterHasCapabilityButNotCapacity();
      --testSuite.testPrinterUserDoesntHaveDocument();
      --testSuite.testPrinterFormatNotInCapabilities();
      --testSuite.testPrinterTonerNotInCapabilities();
      --testSuite.testPrinterNoTonerLeft();
      --testSuite.testPrinterNoPagesLeft();
      --testSuite.testPrinterNotOperational();
      testSuite.testPrinterStatusInCapabilities();
    );

end PrinterErrorTest