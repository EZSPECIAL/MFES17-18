-- Print test
create network := new Network()
create pPricing1 := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pPricing2 := new PrinterPricing(0.05, 0.16, 0.08, 0.26)
create pCapability := new PrinterCapability(true, false, true, true)
create pCapacity := new PrinterCapacity(45, 0, 50, 5)
create pStatus := new PrinterStatus()
create p1 := new Printer("p1", pCapability, pPricing1, pCapacity, pStatus)
create p2 := new Printer("p2", pCapability, pPricing2, pCapacity, pStatus)
print network.addPrinter(p1)
print network.addPrinter(p2)
create u := new User(20.0)
create d1 := new Document("test", 40, '4', 'B')
create d2 := new Document("hello", 5, '4', 'C')
print u.addDocument(d1)
print u.addDocument(d2)
print u.getBalance()
print d1.getPagesLeft()
print d2.getPagesLeft()
print u.getDocumentList()
print p1.getPrinterStatus().getStatus()
print p1.print(d1, u)
print p1.print(d2, u)
print u.getBalance()
print d1.getPagesLeft()
print d2.getPagesLeft()
print u.addDocument(d1)
print d2
print u.getDocumentList()
print p1.getPrinterCapacities().getNumOfSheetsA4()
print p1.getPrinterCapacities().getBlackPrintsLeft()
print p1.getPrinterCapacities().getColorPrintsLeft()
print p1.getPrinterStatus().getStatus()
print network.printIndividualReport()

-- Test breaking something that can't be broken for the specific printer
create pPricing := new PrinterPricing(0.5, 0.8, 0.6, 1)
create pCapacity := new PrinterCapacity(20, 0, 25, 0)
create pCapability := new PrinterCapability(true, false, true, false)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
print p.getPrinterStatus().getStatus()
print p.break({"needA4", "needA3", "needBlackToner", "needColorToner"})
print p.getPrinterStatus().getStatus()

-- Test break function
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, true, true)
create pCapacity := new PrinterCapacity(45, 0, 50, 5)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
print p.getPrinterStatus().getStatus()
print p.getPrinterCapacities().getNumOfSheetsA4()
print p.getPrinterCapacities().getBlackPrintsLeft()
print p.getPrinterCapacities().getColorPrintsLeft()
print p.break({"needA4", "needBlackToner", "needColorToner"})
print p.getPrinterStatus().getStatus()
print p.getPrinterCapacities().getNumOfSheetsA4()
print p.getPrinterCapacities().getBlackPrintsLeft()
print p.getPrinterCapacities().getColorPrintsLeft()

-- Test break all function
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, true, true)
create pCapacity := new PrinterCapacity(45, 0, 50, 5)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
print p.getPrinterStatus().getStatus()
print p.getPrinterCapacities().getNumOfSheetsA4()
print p.getPrinterCapacities().getBlackPrintsLeft()
print p.getPrinterCapacities().getColorPrintsLeft()
print p.breakAll()
print p.getPrinterStatus().getStatus()
print p.getPrinterCapacities().getNumOfSheetsA4()
print p.getPrinterCapacities().getBlackPrintsLeft()
print p.getPrinterCapacities().getColorPrintsLeft()

-- Test fixing something that isn't broken (should fail)
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, true, true)
create pCapacity := new PrinterCapacity(45, 0, 50, 5)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
print p.getPrinterStatus().getStatus()
print p.fix({"needA4"})

-- Test fix function
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, true, true)
create pCapacity := new PrinterCapacity(45, 0, 50, 5)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
print p.getPrinterStatus().getStatus()
print p.getPrinterCapacities().getNumOfSheetsA4()
print p.getPrinterCapacities().getBlackPrintsLeft()
print p.getPrinterCapacities().getColorPrintsLeft()
print p.breakAll()
print p.getPrinterStatus().getStatus()
print p.getPrinterCapacities().getNumOfSheetsA4()
print p.getPrinterCapacities().getBlackPrintsLeft()
print p.getPrinterCapacities().getColorPrintsLeft()
print p.fix({"needA4", "needBlackToner", "needFixing"})
print p.getPrinterStatus().getStatus()
print p.getPrinterCapacities().getNumOfSheetsA4()
print p.getPrinterCapacities().getBlackPrintsLeft()
print p.getPrinterCapacities().getColorPrintsLeft()

-- Test fix all function
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, true, true)
create pCapacity := new PrinterCapacity(45, 0, 50, 5)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
print p.getPrinterStatus().getStatus()
print p.getPrinterCapacities().getNumOfSheetsA4()
print p.getPrinterCapacities().getBlackPrintsLeft()
print p.getPrinterCapacities().getColorPrintsLeft()
print p.breakAll()
print p.getPrinterStatus().getStatus()
print p.getPrinterCapacities().getNumOfSheetsA4()
print p.getPrinterCapacities().getBlackPrintsLeft()
print p.getPrinterCapacities().getColorPrintsLeft()
print p.fixAll()
print p.getPrinterStatus().getStatus()
print p.getPrinterCapacities().getNumOfSheetsA4()
print p.getPrinterCapacities().getBlackPrintsLeft()
print p.getPrinterCapacities().getColorPrintsLeft()
print p.fixAll()
print p.getPrinterStatus().getStatus()
print p.getPrinterCapacities().getNumOfSheetsA4()
print p.getPrinterCapacities().getBlackPrintsLeft()
print p.getPrinterCapacities().getColorPrintsLeft()

-- Test capability / capacity invariant (printer must have max capacity of things it can do)
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, true, true)
create pCapacity := new PrinterCapacity(45, 0, 50, 0)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)

-- Test capability / capacity invariant (printer can't have max capacity of things it can't do)
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, true, true)
create pCapacity := new PrinterCapacity(45, 5, 50, 5)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)

-- Test break function (needFixing)
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, true, true)
create pCapacity := new PrinterCapacity(45, 0, 50, 5)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
print p.getPrinterStatus().getStatus()
print p.break({"needFixing", "needA4"})
print p.getPrinterStatus().getStatus()
print p.getPrinterCapacities().getNumOfSheetsA4()

-- Test broken printer (should fail)
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, true, false)
create pCapacity := new PrinterCapacity(1, 0, 3, 4)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
print p.break({"needFixing"})
create u := new User(20.0)
create d := new Document("test", 40, '4', 'C')
print u.addDocument(d)
print p.print(d, u)

-- Test user balance not sufficient for printing
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, true, false)
create pCapacity := new PrinterCapacity(1, 0, 3, 0)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
create u := new User(1.0)
create d := new Document("test", 40, '4', 'C')
print u.addDocument(d)
print p.print(d, u)

-- Test numPagesToPrint
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, true, true, true)
create pCapacity := new PrinterCapacity(15, 10, 10, 15)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
create d1 := new Document("test", 15, '4', 'B')
create d2 := new Document("hello", 5, '4', 'C')
create d3 := new Document("hello", 10, '3', 'B')
create d4 := new Document("hello", 15, '3', 'C')
print p.numPagesToPrint(d1)
print p.numPagesToPrint(d2)
print p.numPagesToPrint(d3)
print p.numPagesToPrint(d4)

-- Tests printing cost
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, true, true, true)
create pCapacity := new PrinterCapacity(15, 10, 10, 15)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
create d1 := new Document("test", 40, '4', 'B')
create d2 := new Document("hello", 20, '4', 'C')
create d3 := new Document("hello", 25, '3', 'B')
create d4 := new Document("hello", 15, '3', 'C')
print p.calcPrintingCost(d1)
print p.calcPrintingCost(d2)
print p.calcPrintingCost(d3)
print p.calcPrintingCost(d4)

-- Test printer no toner left (should fail)
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, true, true, true)
create pCapacity := new PrinterCapacity(10, 10, 5, 5)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
create u := new User(20.0)
create d := new Document("test", 20, '4', 'C')
print u.addDocument(d)
print p.print(d, u)
print p.print(d, u)

-- Test printer no toner left but document is of another toner type (should work)
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, false, true)
create pCapacity := new PrinterCapacity(10, 0, 0, 5)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
create u := new User(20.0)
create d := new Document("test", 20, '4', 'C')
print u.addDocument(d)
print p.print(d, u)

-- Test printer no paper left (should fail)
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, true, true, true)
create pCapacity := new PrinterCapacity(5, 10, 10, 10)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
create u := new User(20.0)
create d := new Document("test", 20, '4', 'C')
print u.addDocument(d)
print p.print(d, u)
print p.print(d, u)

-- Test document toner not in printer's capabilities (toner is only black / document is color)
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, true, false)
create pCapacity := new PrinterCapacity(5, 0, 5, 0)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
create u := new User(20.0)
create d := new Document("test", 40, '4', 'C')
print u.addDocument(d)
print p.print(d, u)

-- Test document page format not in printer's capabilities (printer is only A4 / document is A3)
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, true, true)
create pCapacity := new PrinterCapacity(5, 0, 5, 5)
create pStatus := new PrinterStatus()
create p := new Printer("p", pCapability, pPricing, pCapacity, pStatus)
create u := new User(20.0)
create d := new Document("test", 40, '3', 'B')
print u.addDocument(d)
print p.print(d, u)

-- Test document not in user's documents
create network := new Network()
create pPricing1 := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pPricing2 := new PrinterPricing(0.05, 0.16, 0.08, 0.26)
create pCapability := new PrinterCapability(true, false, true, true)
create pCapacity := new PrinterCapacity(5, 0, 5, 5)
create pStatus := new PrinterStatus()
create p1 := new Printer("p1", pCapability, pPricing1, pCapacity, pStatus)
create p2 := new Printer("p2", pCapability, pPricing2, pCapacity, pStatus)
print network.addPrinter(p1)
print network.addPrinter(p2)
create u1 := new User(20.0)
create u2 := new User(25.0)
create d1 := new Document("test", 40, '4', 'B')
create d2 := new Document("hello", 25, '4', 'C')
print u1.addDocument(d1)
print u1.addDocument(d2)
print p1.print(d1, u2)

-- Test printer and network reports
create network := new Network()
create pPricing1 := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pPricing2 := new PrinterPricing(0.05, 0.16, 0.08, 0.26)
create pCapability := new PrinterCapability(true, false, true, true)
create pCapacity := new PrinterCapacity(1, 0, 3, 4)
create pStatus := new PrinterStatus()
create p1 := new Printer("p1", pCapability, pPricing1, pCapacity, pStatus)
create p2 := new Printer("p2", pCapability, pPricing2, pCapacity, pStatus)
print network.addPrinter(p1)
print network.addPrinter(p2)
print network.printIndividualReport()
print network.printGlobalReport()

-- Test printer report
create pPricing := new PrinterPricing(0.03, 0.14, 0.06, 0.24)
create pCapability := new PrinterCapability(true, false, true, true)
create pCapacity := new PrinterCapacity(1, 0, 3, 4)
create pStatus := new PrinterStatus()
create p := new Printer("megaPrint", pCapability, pPricing, pCapacity, pStatus)
print p.printIndividualReport()

-- Test user
create u := new User(20.0)
create d1 := new Document("test", 40, '4', 'B')
create d2 := new Document("hello", 25, '3', 'C')
print u.addDocument(d1)
print u.addDocument(d2)
print u.removeDocument(d1)
print u.deposit(20)
print u.withdraw(30)

-- Test duplicate document name
create u := new User(20.0)
create d1 := new Document("test", 40, '4', 'B')
create d2 := new Document("test", 25, '3', 'C')
print u.addDocument(d1)
print u.addDocument(d2)

-- Fail documents
create d := new Document("hello", 20, '2', 'B')
create d := new Document("hello", 30, '3', 'D')

-- Fail capabilities
create pc := new PrinterCapability(false, false, false,false)
create pc1 := new PrinterCapability(false, false, true,true)
create pc2 := new PrinterCapability(true, false, false,false)

-- Fail capacities
create pCapacity1 := new PrinterCapacity(-1, 2, 3, 4)
create pCapacity2 := new PrinterCapacity(1, -2, 3, 4)
create pCapacity3 := new PrinterCapacity(1, 2, -3, 4)
create pCapacity3 := new PrinterCapacity(1, 2, 3, -4)